#!/usr/bin/env python

# Run the training of the interaction network..
import argparse
import os
import sys
sys.path.append("..")

from intnets.train import main
parser = argparse.ArgumentParser(formatter_class=argparse.
                                 ArgumentDefaultsHelpFormatter)
parser.add_argument("--data_folder", type=str, default='../../ki_data/intnet_input',
                    help="The folder where the data is stored on the system.")
parser.add_argument("--norm", type=str, default='nonorm',
                    help="The name of the normalisation that you'll to use.")
parser.add_argument("--train_events", type=int, default=-1,
                    help="The exact number of training events to use.")
parser.add_argument("--jet_seed", type=int, default=123,
                    help="Seed to use in shuffling the jets.")
parser.add_argument("--seed", type=int, default=127,
                    help="Seed to use in any random thing that is done.")
parser.add_argument('--lr', type=float, default=0.001,
                    help="The learning rate.")
parser.add_argument("--batch", type=int, default=128,
                    help="The batch size.")
parser.add_argument("--epochs", type=int, default=100,
                    help="The number of training epochs.")
parser.add_argument("--valid_split", type=float, default=0.3,
                    help="Fraction of events that are used for validation.")
parser.add_argument("--optimiser", type=str, default="adam",
                    choices=["adam"],
                    help="Name of the optimiser you want to use.")
parser.add_argument("--loss", type=str, default="softmax_with_crossentropy",
                    help="Name of the loss you want to use.")
parser.add_argument("--metrics", type=str, default="categorical_accuracy",
                    help="Name of the success metric you want to use.")
parser.add_argument("--summation", action='store_true',
                    help="Whether the interaction network should have a summation "
                         "layer before the last classifier (perm invariant) or not.")
parser.add_argument("--intnet_type", type=str, default="dens",
                    choices=["qconv", "conv", "dens"],
                    help="The type of interaction network to instantiate.")
parser.add_argument("--gpu", type=str, default="",
                    help="Sets the number of the GPU to run on.")
parser.add_argument("--outdir", type=str, default="test",
                    help="The output directory name.")
args = parser.parse_args()

if args.gpu:
    os.environ["CUDA_VISIBLE_DEVICES"] = args.gpu

data_hyperparams = {
    "data_folder":       args.data_folder,
    "norm":              args.norm,
    "train_events":      args.train_events,
    "test_events":       0,
    "pt_min":            "2.0",
    "nconstituents":     "150",
    "feature_selection": "jedinet",
}

training_hyperparams = {
    "batch":        args.batch,
    "epochs":       args.epochs,
    "lr":           args.lr,
    "valid_split":  args.valid_split,
}

intnet_compilation_hyperparams = {
    "optimizer": [args.optimiser, args.lr],
    "loss":      args.loss,
    "metrics":   [args.metrics],
}

intnet_hyperparams = {
    "effects_nnodes": 50,
    "dynamic_nnodes": 50,
    "abstrac_nnodes": 50,
    "effects_activ":  "selu",
    "dynamic_activ":  "selu",
    "abstrac_activ":  "selu",
    "neffects":       15,
    "ndynamics":      10,
    "l2":             0.001,
    "summation":      args.summation,
}

args = {
    "data_hyperparams":     data_hyperparams,
    "training_hyperparams": training_hyperparams,
    "intnet_type":          args.intnet_type,
    "intnet_hyperparams":   intnet_hyperparams,
    "intnet_compilation":   intnet_compilation_hyperparams,
    "outdir":               args.outdir,
    "jet_seed":             args.jet_seed,
    "seed":                 args.seed,
}

main(args)
